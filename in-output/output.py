# 输出格式美化
# Python两种输出值的方式: 表达式语句和 print() 函数。
#
# 第三种方式是使用文件对象的 write() 方法，标准输出文件可以用 sys.stdout 引用。
#
# 如果你希望输出的形式更加多样，可以使用 str.format() 函数来格式化输出值。
#
# 如果你希望将输出的值转成字符串，可以使用 repr() 或 str() 函数来实现。
#
# str()： 函数返回一个用户易读的表达形式。
# repr()： 产生一个解释器易读的表达形式。

# 例如
# >>> s = 'Hello, Runoob'
# >>> str(s)
# 'Hello, Runoob'
# >>> repr(s)
# "'Hello, Runoob'"
# >>> str(1/7)
# '0.14285714285714285'
# >>> x = 10 * 3.25
# >>> y = 200 * 200
# >>> s = 'x 的值为： ' + repr(x) + ',  y 的值为：' + repr(y) + '...'
# >>> print(s)
# x 的值为： 32.5,  y 的值为：40000...
# >>> #  repr() 函数可以转义字符串中的特殊字符
# ... hello = 'hello, runoob\n'
# >>> hellos = repr(hello)
# >>> print(hellos)
# 'hello, runoob\n'
# >>> # repr() 的参数可以是 Python 的任何对象
# ... repr((x, y, ('Google', 'Runoob')))
# "(32.5, 40000, ('Google', 'Runoob'))"


# 这里有两种方式输出一个平方与立方的表:
#
# >>> for x in range(1, 11):
# ...     print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')
# ...     # 注意前一行 'end' 的使用
# ...     print(repr(x*x*x).rjust(4))
# ...
#  1   1    1
#  2   4    8
#  3   9   27
#  4  16   64
#  5  25  125
#  6  36  216
#  7  49  343
#  8  64  512
#  9  81  729
# 10 100 1000
#
# >>> for x in range(1, 11):
# ...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
# ...
#  1   1    1
#  2   4    8
#  3   9   27
#  4  16   64
#  5  25  125
#  6  36  216
#  7  49  343
#  8  64  512
#  9  81  729
# 10 100 1000

# 注意：在第一个例子中, 每列间的空格由 print() 添加。
#
# 这个例子展示了字符串对象的 rjust() 方法, 它可以将字符串靠右, 并在左边填充空格。
#
# 还有类似的方法, 如 ljust() 和 center()。 这些方法并不会写任何东西, 它们仅仅返回新的字符串。
#
# 另一个方法 zfill(), 它会在数字的左边填充 0，如下所示：
#
# >>> '12'.zfill(5)
# '00012'
# >>> '-3.14'.zfill(7)
# '-003.14'
# >>> '3.14159265359'.zfill(5)
# '3.14159265359'










